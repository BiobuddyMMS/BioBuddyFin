const express = require('express');
const line = require('@line/bot-sdk');
const fs = require('fs');

// --- 1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
// ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
const rawAnimalData = JSON.parse(fs.readFileSync('./animalData.json', 'utf-8'));
const animalData = {};
const allAnimalNames = Object.keys(rawAnimalData["Phylum"]);
allAnimalNames.forEach(animalName => {
  animalData[animalName] = {};
  for (const trait in rawAnimalData) {
    if (rawAnimalData[trait][animalName] !== undefined) {
      animalData[animalName][trait] = rawAnimalData[trait][animalName];
    }
  }
});

// --- 2. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ BOT ‡πÅ‡∏•‡∏∞ SERVER ---
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const app = express();
const client = new line.Client(config);

// --- 3. ‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Å‡∏° ---
const gameRooms = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÅ‡∏ö‡∏ö 2 ‡∏Ñ‡∏ô
const soloSessions = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà
function findUserRoom(userId) {
    return Object.values(gameRooms).find(room => room.players.red?.id === userId || room.players.blue?.id === userId);
}

// --- 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° ---
function recommendQuestion(remainingAnimals) {
    if (remainingAnimals.length <= 1) return null;

    const traitScores = {};
    const half = remainingAnimals.length / 2;

    // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    remainingAnimals.forEach(animal => {
        const traits = animalData[animal];
        for (let trait in traits) {
            if (['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô', '‡∏™‡∏≤‡∏£‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏π‡πâ', 'Phylum'].includes(trait)) continue;
            if (!traitScores[trait]) traitScores[trait] = 0;
            if (traits[trait] === '‡πÉ‡∏ä‡πà') traitScores[trait]++;
        }
    });

    let bestTrait = null;
    let minDifference = Infinity;

    // ‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á 50/50 ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    for (const trait in traitScores) {
        const difference = Math.abs(half - traitScores[trait]);
        if (difference < minDifference) {
            minDifference = difference;
            bestTrait = trait;
        }
    }
    return bestTrait;
}

// --- 5. WEBHOOK ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ EVENT ---
app.post('/webhook', line.middleware(config), (req, res) => {
  Promise
    .all(req.body.events.map(handleEvent))
    .then(result => res.json(result))
    .catch(err => {
      console.error('Webhook Error:', err);
      res.status(500).end();
    });
});

async function handleEvent(event) {
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô) ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    if (event.type === 'follow' || (event.type === 'message' && event.message.type === 'text' && event.message.text.toLowerCase() === '‡πÄ‡∏°‡∏ô‡∏π')) {
        const welcomeMessage = {
            type: 'text',
            text: '‡∏ß‡πà‡∏≤‡πÑ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏µ‡πâ! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà BioBuddy üß¨‚ú®\n\n‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏≠‡∏ó‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏ì‡∏≤‡∏à‡∏±‡∏Å‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡∏° "Who is it?" ‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô!\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá',
            quickReply: {
                items: [
                    { type: 'action', action: { type: 'message', label: '‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚öîÔ∏è', text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°' } },
                    { type: 'action', action: { type: 'message', label: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } },
                    { type: 'action', action: { type: 'message', label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô üìú', text: '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤' } }
                ]
            }
        };
        return client.replyMessage(event.replyToken, welcomeMessage);
    }
    
    if (event.type !== 'message' || event.message.type !== 'text') {
        return Promise.resolve(null);
    }

    const userMessage = event.message.text.trim();
    const userId = event.source.userId;

    // --- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≤‡∏Å‡∏• (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤) ---
    const infoMatch = userMessage.match(/(?:‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•|‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö|‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á|‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•|‡∏ö‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•|‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á)\s*(.+)/i);
    if (infoMatch) {
        const animalName = infoMatch[1].trim();
        if (animalData[animalName]) {
            const info = `‡∏à‡∏±‡∏î‡πÑ‡∏õ! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á ${animalName} üßê\n\n`+
                         `‚ú® **‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô:** ${animalData[animalName]['‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô']}\n\n`+
                         `üß† **‡∏™‡∏≤‡∏£‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏π‡πâ:** ${animalData[animalName]['‡∏™‡∏≤‡∏£‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏π‡πâ']}\n\n`+
                         `üß¨ **Phylum:** ${animalData[animalName]['Phylum']}`;
            return client.replyMessage(event.replyToken, { type: 'text', text: info });
        } else {
            return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏ö‡∏±‡∏î‡∏î‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "${animalName}" ‡∏≠‡πà‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞` });
        }
    }

    if (userMessage.match(/(‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤|‡∏Å‡∏é|‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô)/i)) {
        const ruleText = '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ Who is it? by BioBuddy üß¨‚ú®\n\n' +
            '**‡∏°‡∏µ 2 ‡πÇ‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏∞:**\n\n' +
            '**1. ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô (2 ‡∏Ñ‡∏ô):**\n' +
            '   - ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°" ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n' +
            '   - ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° [‡πÇ‡∏Ñ‡πâ‡∏î]"\n' +
            '   - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå]" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó\n' +
            '   - "‡∏ó‡∏≠‡∏¢‡πÄ‡∏ï‡πã‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô\n' +
            '   - ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πà‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ\n' +
            '   - ‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏≠‡∏ö‡∏ö‡∏≠‡∏ó‡∏î‡πâ‡∏ß‡∏¢ "‡πÉ‡∏ä‡πà" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"\n' +
            '   - ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ\n\n' +
            '**2. ‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó (1 ‡∏Ñ‡∏ô):**\n' +
            '   - ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°\n' +
            '   - ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå 1 ‡∏ï‡∏±‡∏ß\n' +
            '   - ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡πÄ‡∏ä‡πà‡∏ô "‡∏°‡∏µ‡∏Ç‡∏ô‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?"\n' +
            '   - ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ó‡∏≤‡∏¢: [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå]"\n\n' +
            'üí° **‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠):**\n' +
            '   - "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå]": ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô‡πÜ\n' +
            '   - "‡πÄ‡∏ä‡πá‡∏Ñ: [‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞]": ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏´‡∏°‡∏î 2 ‡∏Ñ‡∏ô)\n' +
            '   - "‡∏à‡∏ö‡πÄ‡∏Å‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ": ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤';
        return client.replyMessage(event.replyToken, { type: 'text', text: ruleText });
    }

    const room = findUserRoom(userId);
    const soloSession = soloSessions[userId];
    
    // --- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏ö‡πÄ‡∏Å‡∏° ---
    if (userMessage.match(/(‡∏à‡∏ö‡πÄ‡∏Å‡∏°|‡∏≠‡∏≠‡∏Å‡πÄ‡∏Å‡∏°|‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ)/i)) {
        let replied = false;
        if (room) {
            const opponentTeamColor = room.players.red.id === userId ? 'blue' : 'red';
            const opponentPlayer = room.players[opponentTeamColor];
            if (opponentPlayer) {
                client.pushMessage(opponentPlayer.id, { type: 'text', text: `‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏°‡∏Ç‡∏≠‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞ üòâ` }).catch(err => console.error("Push message failed:", err));
            }
            delete gameRooms[room.id];
            replied = true;
        }
        if (soloSession) {
            const secretAnimal = soloSession.secretAnimal;
            delete soloSessions[userId];
            const revealMessage = {
                type: 'text',
                text: `‡∏¢‡∏≠‡∏°‡πÅ‡∏û‡πâ‡πÄ‡∏´‡∏£‡∏≠! ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ü§ì\n\n‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏Ñ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Ñ‡∏∑‡∏≠ "${secretAnimal}" ‡πÑ‡∏á‡∏•‡πà‡∏∞!\n\n‡∏≠‡∏¢‡∏≤‡∏Å‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏´‡∏°?`,
                quickReply: { items: [
                    { type: 'action', action: { type: 'message', label: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } },
                    { type: 'action', action: { type: 'message', label: '‡πÅ‡∏Ç‡πà‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚öîÔ∏è', text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°' } }
                ]}
            };
            return client.replyMessage(event.replyToken, revealMessage);
        }
        if(replied) {
             const goodbyeMessage = {
                type: 'text',
                text: '‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÅ‡∏•‡πâ‡∏ß! ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡πá‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá',
                quickReply: { items: [
                    { type: 'action', action: { type: 'message', label: '‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚öîÔ∏è', text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°' } },
                    { type: 'action', action: { type: 'message', label: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } },
                    { type: 'action', action: { type: 'message', label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô üìú', text: '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤' } }
                ]}
            };
            return client.replyMessage(event.replyToken, goodbyeMessage);
        }
    }

    // --- ‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô (1 Player) ---
    if (soloSession) {
        if (userMessage.match(/(‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°|‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°|‡∏ñ‡∏≤‡∏°‡πÑ‡∏£‡∏î‡∏µ|‡πÑ‡∏Å‡∏î‡πå‡∏´‡∏ô‡πà‡∏≠‡∏¢)/i)) {
            // ‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ `remainingAnimals` ‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πâ `allAnimalNames` ‡πÅ‡∏ó‡∏ô
            const questionTrait = recommendQuestion(allAnimalNames);
            return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏™‡∏¥: "‡∏°‡∏±‡∏ô ${questionTrait} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?"` });
        }

        const practiceQuestionMatch = userMessage.match(/(?:‡∏°‡∏µ|‡∏°‡∏±‡∏ô‡∏°‡∏µ|‡πÄ‡∏õ‡πá‡∏ô)\s*(.+?)\s*(?:‡∏°‡∏±‡πâ‡∏¢|‡πÑ‡∏´‡∏°|‡πÉ‡∏ä‡πà‡∏õ‡πà‡∏∞|‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤)\??$/i);
        if (practiceQuestionMatch) {
            soloSession.questionsAsked++;
            const traitToCheck = practiceQuestionMatch[1].trim().toLowerCase();
            const secretAnimalTraits = animalData[soloSession.secretAnimal];
            let foundMatch = false;
            for (const trait in secretAnimalTraits) {
                if (trait.toLowerCase().includes(traitToCheck) && secretAnimalTraits[trait] === '‡πÉ‡∏ä‡πà') {
                    foundMatch = true;
                    break;
                }
            }
            return client.replyMessage(event.replyToken, { type: 'text', text: foundMatch ? '‡πÉ‡∏ä‡πà ‚úÖ' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‚ùå' });
        }

        const guessMatch = userMessage.match(/(?:‡∏ó‡∏≤‡∏¢|‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤|‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠)[:Ôºö\s]*(.+)/i);
        if (guessMatch) {
            const guessedAnimal = guessMatch[1].trim();
            if (guessedAnimal === soloSession.secretAnimal) {
                const score = Math.max(0, 100 - (soloSession.questionsAsked * 5)); // Calculate score
                const winText = `üí• BINGO! üí• ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏∞‡∏Ñ‡πâ‡∏≤‡∏ö!\n‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏î‡∏î‡∏µ‡πâ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏Ñ‡∏∑‡∏≠ "${soloSession.secretAnimal}" ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á!\n\n‡πÄ‡∏ò‡∏≠‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ ${soloSession.questionsAsked} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏õ ${score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô!\n\n‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πá‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá`;
                delete soloSessions[userId];
                 return client.replyMessage(event.replyToken, {
                    type: 'text', text: winText,
                    quickReply: { items: [
                        { type: 'action', action: { type: 'message', label: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } },
                        { type: 'action', action: { type: 'message', label: '‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å', text: '‡πÄ‡∏°‡∏ô‡∏π' } }
                    ]}
                });
            } else {
                soloSession.questionsAsked++; // ‡∏ô‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏° 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà! ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞ ü§î` });
            }
        }
        return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏∞! ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏â‡∏±‡∏ô‡∏Ñ‡∏¥‡∏î‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ó‡∏≤‡∏¢" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! (‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏à‡∏ö‡πÄ‡∏Å‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)` });
    }

    // --- ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô (2 Players) ---
    if (room) {
        const userTeamColor = room.players.red.id === userId ? 'red' : 'blue';
        const opponentTeamColor = userTeamColor === 'red' ? 'blue' : 'red';
        
        const checkMatch = userMessage.match(/^(?:‡πÄ‡∏ä‡πá‡∏Ñ|‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏£‡∏≤‡∏°‡∏µ|‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏°‡∏µ|‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)[\s:Ôºö]*(.+?)\s*(?:‡∏°‡∏±‡πâ‡∏¢|‡πÑ‡∏´‡∏°|‡πÉ‡∏ä‡πà‡∏õ‡πà‡∏∞|‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤)\??$/i);
        if (checkMatch) {
            const traitToCheck = checkMatch[1].trim().toLowerCase();
            const secretAnimal = room.players[userTeamColor].secretAnimal;
            if (!secretAnimal) return client.replyMessage(event.replyToken, { type: 'text', text: '‡πÄ‡∏ò‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ!' });
            
            let foundTrait = null;
            let foundValue = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            for (const trait in animalData[secretAnimal]) {
                if (trait.toLowerCase().includes(traitToCheck)) {
                    foundTrait = trait;
                    foundValue = animalData[secretAnimal][trait];
                    break;
                }
            }
            if (foundTrait) {
                const replyText = `‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠ ("${secretAnimal}")...\n\nQ: "${foundTrait}"?\nA: **${foundValue}**\n\n‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ï‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! üòâ`;
                return client.replyMessage(event.replyToken, { type: 'text', text: replyText });
            } else {
                return client.replyMessage(event.replyToken, { type: 'text', text: `‡πÄ‡∏≠...‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "${traitToCheck}" ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏≠‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏∞` });
            }
        }
        
        if (room.state === 'choosing') {
            const secretMatch = userMessage.match(/(?:‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö|‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏£‡∏≤|‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ)‡∏Ñ‡∏∑‡∏≠\s*(.+)/i);
            if(secretMatch) {
                const animalName = secretMatch[1].trim();
                if (allAnimalNames.includes(animalName)) {
                    room.players[userTeamColor].secretAnimal = animalName;
                    await client.replyMessage(event.replyToken, { type: 'text', text: `‡πÇ‡∏≠‡πÄ‡∏Ñ! ‡∏ö‡∏±‡∏î‡∏î‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠ "${animalName}" ü§´` });
                    if (room.players.red.secretAnimal && room.players.blue.secretAnimal) {
                        room.state = 'rolling';
                        const rollMessage = "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏°‡∏≤‡∏ß‡∏±‡∏î‡∏î‡∏ß‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢...\n\n‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ó‡∏≠‡∏¢‡πÄ‡∏ï‡πã‡∏≤' üé≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô!";
                        await client.pushMessage(room.players.red.id, { type: 'text', text: rollMessage });
                        await client.pushMessage(room.players.blue.id, { type: 'text', text: rollMessage });
                    }
                } else {
                     return client.replyMessage(event.replyToken, { type: 'text', text: `‡πÄ‡∏≠‡πä‡∏∞! ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ä‡∏∑‡πà‡∏≠ "${animalName}" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞` });
                }
            }
        } else if (room.state === 'rolling') {
            if (userMessage.match(/(‡∏ó‡∏≠‡∏¢‡πÄ‡∏ï‡πã‡∏≤|‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤|‡∏ß‡∏±‡∏î‡∏î‡∏ß‡∏á)/i)) {
                if (room.players[userTeamColor].hasRolled) {
                    return client.replyMessage(event.replyToken, { type: 'text', text: "‡πÄ‡∏ò‡∏≠‡∏ó‡∏≠‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞!" });
                }
                const diceRoll = Math.floor(Math.random() * 6) + 1;
                room.players[userTeamColor].diceScore = diceRoll;
                room.players[userTeamColor].hasRolled = true;
                
                const opponentPlayer = room.players[opponentTeamColor];
                if(opponentPlayer) {
                  await client.pushMessage(opponentPlayer.id, { type: 'text', text: `‡∏ó‡∏µ‡∏° ${room.players[userTeamColor].name} ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ ${diceRoll} ‡πÅ‡∏ï‡πâ‡∏°!` });
                }
                await client.replyMessage(event.replyToken, { type: 'text', text: `‡πÄ‡∏ò‡∏≠ (${room.players[userTeamColor].name}) ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ ${diceRoll} ‡πÅ‡∏ï‡πâ‡∏°! üé≤` });
                
                if (room.players.red.hasRolled && room.players.blue.hasRolled) {
                    let turnAnnounce;
                    if (room.players.red.diceScore > room.players.blue.diceScore) {
                        room.currentTurn = 'red';
                        turnAnnounce = `‡∏ó‡∏µ‡∏° ${room.players.red.name} ‡πÅ‡∏ï‡πâ‡∏°‡∏ï‡∏∂‡∏á‡∏Å‡∏ß‡πà‡∏≤! ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢ ‡∏à‡∏±‡∏î‡πÑ‡∏õ!`;
                    } else if (room.players.blue.diceScore > room.players.red.diceScore) {
                        room.currentTurn = 'blue';
                        turnAnnounce = `‡∏ó‡∏µ‡∏° ${room.players.blue.name} ‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤! ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡πâ‡∏≤‡∏ö!`;
                    } else {
                        room.currentTurn = 'red'; // Tie-break
                        turnAnnounce = `‡πÅ‡∏ï‡πâ‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏â‡∏¢! ‡∏á‡∏±‡πâ‡∏ô...‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏° ${room.players.red.name} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏∞‡∏Å‡∏±‡∏ô! üòú`;
                    }
                    room.state = 'playing';
                    const startMessage = `‡∏ó‡∏≠‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏ú‡∏•‡∏Ñ‡∏∑‡∏≠...\n\n${turnAnnounce}\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ BioBuddy ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏Å‡∏î‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`;
                    await client.pushMessage(room.players.red.id, { type: 'text', text: startMessage });
                    await client.pushMessage(room.players.blue.id, { type: 'text', text: startMessage });
                } else {
                    await client.replyMessage(event.replyToken, { type: 'text', text: `‡∏£‡∏≠‡∏ó‡∏µ‡∏° ${opponentPlayer.name} ‡∏ó‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢!` });
                }
            }
        } else if (room.state === 'playing') {
            if (room.currentTurn !== userTeam) {
                return client.replyMessage(event.replyToken, { type: 'text', text: '‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏µ‡πâ! ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡∏ô‡∏∞ (‡πÅ‡∏ï‡πà‡πÅ‡∏≠‡∏ö "‡πÄ‡∏ä‡πá‡∏Ñ" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ô‡∏∞ ü§´)' });
            }

            if (userMessage.match(/(‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°|‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°|‡∏ñ‡∏≤‡∏°‡πÑ‡∏£‡∏î‡∏µ|‡πÑ‡∏Å‡∏î‡πå‡∏´‡∏ô‡πà‡∏≠‡∏¢)/i)) {
                const questionTrait = recommendQuestion(room.players[userTeam].remainingAnimals);
                if (questionTrait) {
                    room.lastQuestion = { trait: questionTrait };
                    return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏à‡∏±‡∏î‡πÑ‡∏õ! ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ñ‡∏≤‡∏°‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏•‡∏¢:\n\n"‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á... **${questionTrait}**... ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?"` });
                } else {
                    return client.replyMessage(event.replyToken, { type: 'text', text: "‡∏≠‡∏∏‡πä‡∏¢! ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡πà‡∏∞ ‡∏•‡∏≠‡∏á‡∏ó‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡∏°‡∏±‡πâ‡∏¢?" });
                }
            }

            const handleYesNoAnswer = async (isYes) => {
                if (!room.lastQuestion) {
                    return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏ï‡πâ‡∏≠‡∏á "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°" ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ' });
                }
            
                const animalsBefore = [...room.players[userTeam].remainingAnimals];
                const { trait } = room.lastQuestion;
            
                const animalsAfter = animalsBefore.filter(animal => {
                    const hasTrait = (animalData[animal][trait] === '‡πÉ‡∏ä‡πà');
                    return isYes ? hasTrait : !hasTrait;
                });
            
                room.players[userTeam].remainingAnimals = animalsAfter;
                const eliminatedAnimals = animalsBefore.filter(animal => !animalsAfter.includes(animal));
                let replyToCurrentPlayer = `‡πÇ‡∏≠‡πÄ‡∏Ñ! ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ô‡∏∞\n\n`;
                const listLimit = 8;
            
                if (eliminatedAnimals.length > 0) {
                    replyToCurrentPlayer += `‚ùå ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å (${eliminatedAnimals.length} ‡∏ï‡∏±‡∏ß):\n- ${eliminatedAnimals.join('\n- ')}\n\n`;
                } else {
                    replyToCurrentPlayer += `‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÄ‡∏•‡∏¢\n\n`;
                }
            
                if (animalsAfter.length > 0) {
                    replyToCurrentPlayer += `‚úÖ ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà (${animalsAfter.length} ‡∏ï‡∏±‡∏ß):\n- ${animalsAfter.slice(0, listLimit).join('\n- ')}`;
                    if (animalsAfter.length > listLimit) {
                        replyToCurrentPlayer += `\n- ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å ${animalsAfter.length - listLimit} ‡∏ï‡∏±‡∏ß`;
                    }
                    if(animalsAfter.length <= 3) {
                        replyToCurrentPlayer += `\n\n‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡∏ñ‡πâ‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Å‡πá‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ó‡∏≤‡∏¢: [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå]" ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`;
                    }
                } else {
                    replyToCurrentPlayer += `‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏•‡∏¢! ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏∞`;
                }
                
                await client.replyMessage(event.replyToken, { type: 'text', text: replyToCurrentPlayer });
            
                const opponentTeam = userTeam === 'red' ? 'blue' : 'red';
                const opponentPlayer = room.players[opponentTeam];
                if (opponentPlayer) {
                    let pushMessage = `‡∏ó‡∏µ‡∏° ${room.players[userTeam].name} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡πÄ‡∏ò‡∏≠‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ${opponentPlayer.name}!`;
                    if (room.turnBonus > 0) {
                        room.turnBonus--;
                        pushMessage = `‡∏ó‡∏µ‡∏° ${room.players[userTeam].name} ‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏∞ ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`;
                    } else {
                        room.currentTurn = opponentTeam;
                    }
                    await client.pushMessage(opponentPlayer.id, { type: 'text', text: pushMessage });
                }
                room.lastQuestion = null;
            };
            if (userMessage.match(/^(‡πÉ‡∏ä‡πà|‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏¢|‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á|‡πÅ‡∏°‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß|y|yes)$/i)) { return handleYesNoAnswer(true); }
            if (userMessage.match(/^(‡πÑ‡∏°‡πà|‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà|‡∏ú‡∏¥‡∏î|n|no)$/i)) { return handleYesNoAnswer(false); }
            
            const guessMatch = userMessage.match(/(?:‡∏ó‡∏≤‡∏¢|‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤|‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏∑‡∏≠)[:Ôºö\s]*(.+)/i);
            if (guessMatch) {
                const guessedAnimal = guessMatch[1].trim();
                const opponentTeam = userTeam === 'red' ? 'blue' : 'red';
                if (guessedAnimal === room.players[opponentTeam].secretAnimal) {
                    room.state = 'gameover';
                    const winText = `üí• BINGO! üí• ‡∏ó‡∏µ‡∏° ${room.players[userTeam].name} ‡∏ó‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å! ‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ "${guessedAnimal}"!\n\nüéâ ‡∏ä‡∏ô‡∏∞‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏î‡∏¥‡∏Ñ‡πâ‡∏≤‡∏ö! üéâ`;
                    const winMessage = { type: 'text', text: winText, quickReply: { items: [ { type: 'action', action: { type: 'message', label: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà ‚öîÔ∏è', text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°' } }, { type: 'action', action: { type: 'message', label: '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ù‡∏∂‡∏Å ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } } ] } };
                    await client.pushMessage(room.players.red.id, winMessage);
                    await client.pushMessage(room.players.blue.id, winMessage);
                    delete gameRooms[room.id];
                } else {
                    room.turnBonus = 1;
                    room.currentTurn = opponentTeam;
                    await client.replyMessage(event.replyToken, { type: 'text', text: `‡∏≠‡∏∏‡πä‡∏¢! ‡∏ó‡∏≤‡∏¢‡∏ú‡∏¥‡∏î‡∏à‡πâ‡∏≤‡∏≤‡∏≤ ü§£` });
                    await client.pushMessage(room.players[opponentTeam].id, { type: 'text', text: `‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏≤‡∏¢‡∏ú‡∏¥‡∏î! ‡∏ï‡∏≤‡∏û‡∏ß‡∏Å‡πÄ‡∏ò‡∏≠‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏≤‡∏° 2 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏¥‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢! ‡πÇ‡∏Ñ‡∏ï‡∏£‡πÇ‡∏Å‡∏á! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏¢!` });
                }
            }
        }
    }


    // --- Game Starting Commands & Default ---
    if (!room && !soloSession) {
        if (userMessage.match(/(‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô|‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó)/i)) {
            const secretAnimal = allAnimalNames[Math.floor(Math.random() * allAnimalNames.length)];
            soloSessions[userId] = { mode: 'practice', secretAnimal: secretAnimal, questionsAsked: 0 };
            console.log(`[Practice Mode Started] User: ${userId}, Secret Animal: ${secretAnimal}`);
            return client.replyMessage(event.replyToken, { type: 'text', text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏°‡∏î‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô! ü§ñ\n\n‡∏ö‡∏±‡∏î‡∏î‡∏µ‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß 1 ‡∏ï‡∏±‡∏ß... ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏¢‡∏î‡∏π‡∏™‡∏¥!" });
        }
        if (userMessage.match(/(‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°|‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á|‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°|‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏µ‡πâ)/i)) {
            const gameId = `B${Math.floor(100 + Math.random() * 900)}`;
            gameRooms[gameId] = { id: gameId, state: 'waiting', players: { red: { id: userId, name: '‡∏™‡∏µ‡πÅ‡∏î‡∏á ‚ù§Ô∏è‚Äçüî•', secretAnimal: null, remainingAnimals: [...allAnimalNames], hasRolled: false, diceScore: 0 }, blue: null }, currentTurn: null, lastQuestion: null, turnBonus: 0 };
            return client.replyMessage(event.replyToken, { type: 'text', text: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô! ‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ò‡∏≠‡∏Ñ‡∏∑‡∏≠: ${gameId}\n\n‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° ${gameId}" ‡∏°‡∏≤‡πÄ‡∏•‡∏¢!` });
        }
        const joinMatch = userMessage.match(/(?:‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°|‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏°|‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á|‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏µ‡πâ)\s+([A-Z0-9]+)/i);
        if (joinMatch) {
            const gameId = joinMatch[1].toUpperCase();
            const targetRoom = gameRooms[gameId];
            if (targetRoom && targetRoom.state === 'waiting') {
                targetRoom.players.blue = { id: userId, name: '‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô üíß', secretAnimal: null, remainingAnimals: [...allAnimalNames], hasRolled: false, diceScore: 0 };
                targetRoom.state = 'choosing';
                await client.pushMessage(targetRoom.players.red.id, { type: 'text', text: `‡∏ó‡∏µ‡∏° ${targetRoom.players.blue.name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß!` });
                const messageToBoth = `‡πÄ‡∏Å‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°! üí• ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ö‡∏≠‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ß‡∏≠‡∏µ‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô!\n\n**‡∏û‡∏¥‡∏°‡∏û‡πå:** "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏≠ [‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå]"`;
                await client.pushMessage(targetRoom.players.red.id, { type: 'text', text: messageToBoth });
                await client.replyMessage(event.replyToken, { type: 'text', text: `‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏µ‡πâ ${gameId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n` + messageToBoth });
            } else {
                return client.replyMessage(event.replyToken, { type: 'text', text: '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏≠‡πà‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞' });
            }
        }
        
        // Default message with Quick Reply buttons for any other text
        const welcomeMessage = {
            type: 'text',
            text: '‡∏ß‡πà‡∏≤‡πÑ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ã‡∏µ‡πâ! BioBuddy ‡πÄ‡∏≠‡∏á ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá',
            quickReply: {
                items: [
                    { type: 'action', action: { type: 'message', label: '‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚öîÔ∏è', text: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°' } },
                    { type: 'action', action: { type: 'message', label: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ü§ñ', text: '‡∏ù‡∏∂‡∏Å‡πÄ‡∏•‡πà‡∏ô' } },
                    { type: 'action', action: { type: 'message', label: '‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡πà‡∏ô üìú', text: '‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤' } }
                ]
            }
        };
        return client.replyMessage(event.replyToken, welcomeMessage);
    }
    
    return Promise.resolve(null);
}

// --- 6. START SERVER ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`BioBuddy Final Edition is running on port ${PORT}...`);
});
